#   Copyright 2020 The Silkrpc Authors
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.

name: Continuous integration
on: [ push ]
jobs:
  build-clang-and-test:
    name: Build Clang and Test
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Setup Clang and LLVM
        uses: actions/setup-clang@v1
        with:
          version: 11
          platform: x64
      # - uses: actions/setup-go@v2
      #   with:
      #     go-version: 1.16.x
      # - name: Install dependencies
      #   run: |
      #     if [ "$RUNNER_OS" == "Linux" ]; then
      #       sudo apt update && sudo apt install build-essential
      #     fi
      #   shell: bash
      # - uses: actions/cache@v2
      #   with:
      #     path: ~/go/pkg/mod
      #     key: ${{ matrix.os }}-go-${{ hashFiles('**/go.sum') }}
      # - name: Build (non-windows)
      #   if: matrix.os != 'windows-latest'
      #   run: make all
      # - name: Build (windows)
      #   if: matrix.os == 'windows-latest'
      #   run: |
      #     go build -trimpath -o bin/tg.exe ./cmd/tg
      #     go build -trimpath -o bin/rpcdaemon.exe ./cmd/rpcdaemon
      #     go build -trimpath -o bin/rpctest.exe ./cmd/rpctest
      #     go build -trimpath -o bin/integration.exe ./cmd/integration
      #     go build -trimpath -o bin/headers.ext ./cmd/headers
      # - name: Unit Test
      #   run: cmd/unit_test
  lint:
    name: Lint
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Install linter (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo python -m ensurepip --upgrade
          sudo python -m pip install -r requirements.txt
      - name: Run linter (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: ./run_linter.sh

      - name: Install linter (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          py -m ensurepip --upgrade
          py -m pip install -r requirements.txt
      - name: Run linter (Windows)
        if: matrix.os == 'windows-latest'
        run: ./run_linter.bat
