// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: txpool/txpool.proto
#ifndef GRPC_txpool_2ftxpool_2eproto__INCLUDED
#define GRPC_txpool_2ftxpool_2eproto__INCLUDED

#include "txpool/txpool.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace txpool {

class Txpool final {
 public:
  static constexpr char const* service_full_name() {
    return "txpool.Txpool";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Version returns the service version number
    virtual ::grpc::Status Version(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::types::VersionReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::types::VersionReply>> AsyncVersion(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::types::VersionReply>>(AsyncVersionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::types::VersionReply>> PrepareAsyncVersion(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::types::VersionReply>>(PrepareAsyncVersionRaw(context, request, cq));
    }
    // preserves incoming order, changes amount, unknown hashes will be omitted
    virtual ::grpc::Status FindUnknown(::grpc::ClientContext* context, const ::txpool::TxHashes& request, ::txpool::TxHashes* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::txpool::TxHashes>> AsyncFindUnknown(::grpc::ClientContext* context, const ::txpool::TxHashes& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::txpool::TxHashes>>(AsyncFindUnknownRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::txpool::TxHashes>> PrepareAsyncFindUnknown(::grpc::ClientContext* context, const ::txpool::TxHashes& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::txpool::TxHashes>>(PrepareAsyncFindUnknownRaw(context, request, cq));
    }
    // Expecting signed transactions. Preserves incoming order and amount
    // Adding txs as local (use P2P to add remote txs)
    virtual ::grpc::Status Add(::grpc::ClientContext* context, const ::txpool::AddRequest& request, ::txpool::AddReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::txpool::AddReply>> AsyncAdd(::grpc::ClientContext* context, const ::txpool::AddRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::txpool::AddReply>>(AsyncAddRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::txpool::AddReply>> PrepareAsyncAdd(::grpc::ClientContext* context, const ::txpool::AddRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::txpool::AddReply>>(PrepareAsyncAddRaw(context, request, cq));
    }
    // preserves incoming order and amount, if some transaction doesn't exists in pool - returns nil in this slot
    virtual ::grpc::Status Transactions(::grpc::ClientContext* context, const ::txpool::TransactionsRequest& request, ::txpool::TransactionsReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::txpool::TransactionsReply>> AsyncTransactions(::grpc::ClientContext* context, const ::txpool::TransactionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::txpool::TransactionsReply>>(AsyncTransactionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::txpool::TransactionsReply>> PrepareAsyncTransactions(::grpc::ClientContext* context, const ::txpool::TransactionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::txpool::TransactionsReply>>(PrepareAsyncTransactionsRaw(context, request, cq));
    }
    // returns all transactions from tx pool
    virtual ::grpc::Status All(::grpc::ClientContext* context, const ::txpool::AllRequest& request, ::txpool::AllReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::txpool::AllReply>> AsyncAll(::grpc::ClientContext* context, const ::txpool::AllRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::txpool::AllReply>>(AsyncAllRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::txpool::AllReply>> PrepareAsyncAll(::grpc::ClientContext* context, const ::txpool::AllRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::txpool::AllReply>>(PrepareAsyncAllRaw(context, request, cq));
    }
    // subscribe to new transactions add event
    std::unique_ptr< ::grpc::ClientReaderInterface< ::txpool::OnAddReply>> OnAdd(::grpc::ClientContext* context, const ::txpool::OnAddRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::txpool::OnAddReply>>(OnAddRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::txpool::OnAddReply>> AsyncOnAdd(::grpc::ClientContext* context, const ::txpool::OnAddRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::txpool::OnAddReply>>(AsyncOnAddRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::txpool::OnAddReply>> PrepareAsyncOnAdd(::grpc::ClientContext* context, const ::txpool::OnAddRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::txpool::OnAddReply>>(PrepareAsyncOnAddRaw(context, request, cq));
    }
    // returns high level status
    virtual ::grpc::Status Status(::grpc::ClientContext* context, const ::txpool::StatusRequest& request, ::txpool::StatusReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::txpool::StatusReply>> AsyncStatus(::grpc::ClientContext* context, const ::txpool::StatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::txpool::StatusReply>>(AsyncStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::txpool::StatusReply>> PrepareAsyncStatus(::grpc::ClientContext* context, const ::txpool::StatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::txpool::StatusReply>>(PrepareAsyncStatusRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Version returns the service version number
      virtual void Version(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::types::VersionReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Version(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::types::VersionReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Version(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::types::VersionReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Version(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::types::VersionReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Version(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::types::VersionReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Version(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::types::VersionReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // preserves incoming order, changes amount, unknown hashes will be omitted
      virtual void FindUnknown(::grpc::ClientContext* context, const ::txpool::TxHashes* request, ::txpool::TxHashes* response, std::function<void(::grpc::Status)>) = 0;
      virtual void FindUnknown(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::txpool::TxHashes* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void FindUnknown(::grpc::ClientContext* context, const ::txpool::TxHashes* request, ::txpool::TxHashes* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void FindUnknown(::grpc::ClientContext* context, const ::txpool::TxHashes* request, ::txpool::TxHashes* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void FindUnknown(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::txpool::TxHashes* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void FindUnknown(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::txpool::TxHashes* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Expecting signed transactions. Preserves incoming order and amount
      // Adding txs as local (use P2P to add remote txs)
      virtual void Add(::grpc::ClientContext* context, const ::txpool::AddRequest* request, ::txpool::AddReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Add(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::txpool::AddReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Add(::grpc::ClientContext* context, const ::txpool::AddRequest* request, ::txpool::AddReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Add(::grpc::ClientContext* context, const ::txpool::AddRequest* request, ::txpool::AddReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Add(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::txpool::AddReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Add(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::txpool::AddReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // preserves incoming order and amount, if some transaction doesn't exists in pool - returns nil in this slot
      virtual void Transactions(::grpc::ClientContext* context, const ::txpool::TransactionsRequest* request, ::txpool::TransactionsReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Transactions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::txpool::TransactionsReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Transactions(::grpc::ClientContext* context, const ::txpool::TransactionsRequest* request, ::txpool::TransactionsReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Transactions(::grpc::ClientContext* context, const ::txpool::TransactionsRequest* request, ::txpool::TransactionsReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Transactions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::txpool::TransactionsReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Transactions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::txpool::TransactionsReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // returns all transactions from tx pool
      virtual void All(::grpc::ClientContext* context, const ::txpool::AllRequest* request, ::txpool::AllReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void All(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::txpool::AllReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void All(::grpc::ClientContext* context, const ::txpool::AllRequest* request, ::txpool::AllReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void All(::grpc::ClientContext* context, const ::txpool::AllRequest* request, ::txpool::AllReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void All(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::txpool::AllReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void All(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::txpool::AllReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // subscribe to new transactions add event
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void OnAdd(::grpc::ClientContext* context, ::txpool::OnAddRequest* request, ::grpc::ClientReadReactor< ::txpool::OnAddReply>* reactor) = 0;
      #else
      virtual void OnAdd(::grpc::ClientContext* context, ::txpool::OnAddRequest* request, ::grpc::experimental::ClientReadReactor< ::txpool::OnAddReply>* reactor) = 0;
      #endif
      // returns high level status
      virtual void Status(::grpc::ClientContext* context, const ::txpool::StatusRequest* request, ::txpool::StatusReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Status(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::txpool::StatusReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Status(::grpc::ClientContext* context, const ::txpool::StatusRequest* request, ::txpool::StatusReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Status(::grpc::ClientContext* context, const ::txpool::StatusRequest* request, ::txpool::StatusReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Status(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::txpool::StatusReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Status(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::txpool::StatusReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::types::VersionReply>* AsyncVersionRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::types::VersionReply>* PrepareAsyncVersionRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::txpool::TxHashes>* AsyncFindUnknownRaw(::grpc::ClientContext* context, const ::txpool::TxHashes& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::txpool::TxHashes>* PrepareAsyncFindUnknownRaw(::grpc::ClientContext* context, const ::txpool::TxHashes& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::txpool::AddReply>* AsyncAddRaw(::grpc::ClientContext* context, const ::txpool::AddRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::txpool::AddReply>* PrepareAsyncAddRaw(::grpc::ClientContext* context, const ::txpool::AddRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::txpool::TransactionsReply>* AsyncTransactionsRaw(::grpc::ClientContext* context, const ::txpool::TransactionsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::txpool::TransactionsReply>* PrepareAsyncTransactionsRaw(::grpc::ClientContext* context, const ::txpool::TransactionsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::txpool::AllReply>* AsyncAllRaw(::grpc::ClientContext* context, const ::txpool::AllRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::txpool::AllReply>* PrepareAsyncAllRaw(::grpc::ClientContext* context, const ::txpool::AllRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::txpool::OnAddReply>* OnAddRaw(::grpc::ClientContext* context, const ::txpool::OnAddRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::txpool::OnAddReply>* AsyncOnAddRaw(::grpc::ClientContext* context, const ::txpool::OnAddRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::txpool::OnAddReply>* PrepareAsyncOnAddRaw(::grpc::ClientContext* context, const ::txpool::OnAddRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::txpool::StatusReply>* AsyncStatusRaw(::grpc::ClientContext* context, const ::txpool::StatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::txpool::StatusReply>* PrepareAsyncStatusRaw(::grpc::ClientContext* context, const ::txpool::StatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status Version(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::types::VersionReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::types::VersionReply>> AsyncVersion(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::types::VersionReply>>(AsyncVersionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::types::VersionReply>> PrepareAsyncVersion(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::types::VersionReply>>(PrepareAsyncVersionRaw(context, request, cq));
    }
    ::grpc::Status FindUnknown(::grpc::ClientContext* context, const ::txpool::TxHashes& request, ::txpool::TxHashes* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::txpool::TxHashes>> AsyncFindUnknown(::grpc::ClientContext* context, const ::txpool::TxHashes& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::txpool::TxHashes>>(AsyncFindUnknownRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::txpool::TxHashes>> PrepareAsyncFindUnknown(::grpc::ClientContext* context, const ::txpool::TxHashes& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::txpool::TxHashes>>(PrepareAsyncFindUnknownRaw(context, request, cq));
    }
    ::grpc::Status Add(::grpc::ClientContext* context, const ::txpool::AddRequest& request, ::txpool::AddReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::txpool::AddReply>> AsyncAdd(::grpc::ClientContext* context, const ::txpool::AddRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::txpool::AddReply>>(AsyncAddRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::txpool::AddReply>> PrepareAsyncAdd(::grpc::ClientContext* context, const ::txpool::AddRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::txpool::AddReply>>(PrepareAsyncAddRaw(context, request, cq));
    }
    ::grpc::Status Transactions(::grpc::ClientContext* context, const ::txpool::TransactionsRequest& request, ::txpool::TransactionsReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::txpool::TransactionsReply>> AsyncTransactions(::grpc::ClientContext* context, const ::txpool::TransactionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::txpool::TransactionsReply>>(AsyncTransactionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::txpool::TransactionsReply>> PrepareAsyncTransactions(::grpc::ClientContext* context, const ::txpool::TransactionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::txpool::TransactionsReply>>(PrepareAsyncTransactionsRaw(context, request, cq));
    }
    ::grpc::Status All(::grpc::ClientContext* context, const ::txpool::AllRequest& request, ::txpool::AllReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::txpool::AllReply>> AsyncAll(::grpc::ClientContext* context, const ::txpool::AllRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::txpool::AllReply>>(AsyncAllRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::txpool::AllReply>> PrepareAsyncAll(::grpc::ClientContext* context, const ::txpool::AllRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::txpool::AllReply>>(PrepareAsyncAllRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::txpool::OnAddReply>> OnAdd(::grpc::ClientContext* context, const ::txpool::OnAddRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::txpool::OnAddReply>>(OnAddRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::txpool::OnAddReply>> AsyncOnAdd(::grpc::ClientContext* context, const ::txpool::OnAddRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::txpool::OnAddReply>>(AsyncOnAddRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::txpool::OnAddReply>> PrepareAsyncOnAdd(::grpc::ClientContext* context, const ::txpool::OnAddRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::txpool::OnAddReply>>(PrepareAsyncOnAddRaw(context, request, cq));
    }
    ::grpc::Status Status(::grpc::ClientContext* context, const ::txpool::StatusRequest& request, ::txpool::StatusReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::txpool::StatusReply>> AsyncStatus(::grpc::ClientContext* context, const ::txpool::StatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::txpool::StatusReply>>(AsyncStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::txpool::StatusReply>> PrepareAsyncStatus(::grpc::ClientContext* context, const ::txpool::StatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::txpool::StatusReply>>(PrepareAsyncStatusRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void Version(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::types::VersionReply* response, std::function<void(::grpc::Status)>) override;
      void Version(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::types::VersionReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Version(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::types::VersionReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Version(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::types::VersionReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Version(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::types::VersionReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Version(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::types::VersionReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void FindUnknown(::grpc::ClientContext* context, const ::txpool::TxHashes* request, ::txpool::TxHashes* response, std::function<void(::grpc::Status)>) override;
      void FindUnknown(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::txpool::TxHashes* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void FindUnknown(::grpc::ClientContext* context, const ::txpool::TxHashes* request, ::txpool::TxHashes* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void FindUnknown(::grpc::ClientContext* context, const ::txpool::TxHashes* request, ::txpool::TxHashes* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void FindUnknown(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::txpool::TxHashes* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void FindUnknown(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::txpool::TxHashes* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void Add(::grpc::ClientContext* context, const ::txpool::AddRequest* request, ::txpool::AddReply* response, std::function<void(::grpc::Status)>) override;
      void Add(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::txpool::AddReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Add(::grpc::ClientContext* context, const ::txpool::AddRequest* request, ::txpool::AddReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Add(::grpc::ClientContext* context, const ::txpool::AddRequest* request, ::txpool::AddReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Add(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::txpool::AddReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Add(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::txpool::AddReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void Transactions(::grpc::ClientContext* context, const ::txpool::TransactionsRequest* request, ::txpool::TransactionsReply* response, std::function<void(::grpc::Status)>) override;
      void Transactions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::txpool::TransactionsReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Transactions(::grpc::ClientContext* context, const ::txpool::TransactionsRequest* request, ::txpool::TransactionsReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Transactions(::grpc::ClientContext* context, const ::txpool::TransactionsRequest* request, ::txpool::TransactionsReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Transactions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::txpool::TransactionsReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Transactions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::txpool::TransactionsReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void All(::grpc::ClientContext* context, const ::txpool::AllRequest* request, ::txpool::AllReply* response, std::function<void(::grpc::Status)>) override;
      void All(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::txpool::AllReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void All(::grpc::ClientContext* context, const ::txpool::AllRequest* request, ::txpool::AllReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void All(::grpc::ClientContext* context, const ::txpool::AllRequest* request, ::txpool::AllReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void All(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::txpool::AllReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void All(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::txpool::AllReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void OnAdd(::grpc::ClientContext* context, ::txpool::OnAddRequest* request, ::grpc::ClientReadReactor< ::txpool::OnAddReply>* reactor) override;
      #else
      void OnAdd(::grpc::ClientContext* context, ::txpool::OnAddRequest* request, ::grpc::experimental::ClientReadReactor< ::txpool::OnAddReply>* reactor) override;
      #endif
      void Status(::grpc::ClientContext* context, const ::txpool::StatusRequest* request, ::txpool::StatusReply* response, std::function<void(::grpc::Status)>) override;
      void Status(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::txpool::StatusReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Status(::grpc::ClientContext* context, const ::txpool::StatusRequest* request, ::txpool::StatusReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Status(::grpc::ClientContext* context, const ::txpool::StatusRequest* request, ::txpool::StatusReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Status(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::txpool::StatusReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Status(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::txpool::StatusReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::types::VersionReply>* AsyncVersionRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::types::VersionReply>* PrepareAsyncVersionRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::txpool::TxHashes>* AsyncFindUnknownRaw(::grpc::ClientContext* context, const ::txpool::TxHashes& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::txpool::TxHashes>* PrepareAsyncFindUnknownRaw(::grpc::ClientContext* context, const ::txpool::TxHashes& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::txpool::AddReply>* AsyncAddRaw(::grpc::ClientContext* context, const ::txpool::AddRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::txpool::AddReply>* PrepareAsyncAddRaw(::grpc::ClientContext* context, const ::txpool::AddRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::txpool::TransactionsReply>* AsyncTransactionsRaw(::grpc::ClientContext* context, const ::txpool::TransactionsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::txpool::TransactionsReply>* PrepareAsyncTransactionsRaw(::grpc::ClientContext* context, const ::txpool::TransactionsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::txpool::AllReply>* AsyncAllRaw(::grpc::ClientContext* context, const ::txpool::AllRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::txpool::AllReply>* PrepareAsyncAllRaw(::grpc::ClientContext* context, const ::txpool::AllRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::txpool::OnAddReply>* OnAddRaw(::grpc::ClientContext* context, const ::txpool::OnAddRequest& request) override;
    ::grpc::ClientAsyncReader< ::txpool::OnAddReply>* AsyncOnAddRaw(::grpc::ClientContext* context, const ::txpool::OnAddRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::txpool::OnAddReply>* PrepareAsyncOnAddRaw(::grpc::ClientContext* context, const ::txpool::OnAddRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::txpool::StatusReply>* AsyncStatusRaw(::grpc::ClientContext* context, const ::txpool::StatusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::txpool::StatusReply>* PrepareAsyncStatusRaw(::grpc::ClientContext* context, const ::txpool::StatusRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Version_;
    const ::grpc::internal::RpcMethod rpcmethod_FindUnknown_;
    const ::grpc::internal::RpcMethod rpcmethod_Add_;
    const ::grpc::internal::RpcMethod rpcmethod_Transactions_;
    const ::grpc::internal::RpcMethod rpcmethod_All_;
    const ::grpc::internal::RpcMethod rpcmethod_OnAdd_;
    const ::grpc::internal::RpcMethod rpcmethod_Status_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Version returns the service version number
    virtual ::grpc::Status Version(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::types::VersionReply* response);
    // preserves incoming order, changes amount, unknown hashes will be omitted
    virtual ::grpc::Status FindUnknown(::grpc::ServerContext* context, const ::txpool::TxHashes* request, ::txpool::TxHashes* response);
    // Expecting signed transactions. Preserves incoming order and amount
    // Adding txs as local (use P2P to add remote txs)
    virtual ::grpc::Status Add(::grpc::ServerContext* context, const ::txpool::AddRequest* request, ::txpool::AddReply* response);
    // preserves incoming order and amount, if some transaction doesn't exists in pool - returns nil in this slot
    virtual ::grpc::Status Transactions(::grpc::ServerContext* context, const ::txpool::TransactionsRequest* request, ::txpool::TransactionsReply* response);
    // returns all transactions from tx pool
    virtual ::grpc::Status All(::grpc::ServerContext* context, const ::txpool::AllRequest* request, ::txpool::AllReply* response);
    // subscribe to new transactions add event
    virtual ::grpc::Status OnAdd(::grpc::ServerContext* context, const ::txpool::OnAddRequest* request, ::grpc::ServerWriter< ::txpool::OnAddReply>* writer);
    // returns high level status
    virtual ::grpc::Status Status(::grpc::ServerContext* context, const ::txpool::StatusRequest* request, ::txpool::StatusReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Version : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Version() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Version() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Version(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::types::VersionReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestVersion(::grpc::ServerContext* context, ::google::protobuf::Empty* request, ::grpc::ServerAsyncResponseWriter< ::types::VersionReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_FindUnknown : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_FindUnknown() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_FindUnknown() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindUnknown(::grpc::ServerContext* /*context*/, const ::txpool::TxHashes* /*request*/, ::txpool::TxHashes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFindUnknown(::grpc::ServerContext* context, ::txpool::TxHashes* request, ::grpc::ServerAsyncResponseWriter< ::txpool::TxHashes>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Add : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Add() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Add() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Add(::grpc::ServerContext* /*context*/, const ::txpool::AddRequest* /*request*/, ::txpool::AddReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAdd(::grpc::ServerContext* context, ::txpool::AddRequest* request, ::grpc::ServerAsyncResponseWriter< ::txpool::AddReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Transactions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Transactions() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_Transactions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Transactions(::grpc::ServerContext* /*context*/, const ::txpool::TransactionsRequest* /*request*/, ::txpool::TransactionsReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTransactions(::grpc::ServerContext* context, ::txpool::TransactionsRequest* request, ::grpc::ServerAsyncResponseWriter< ::txpool::TransactionsReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_All : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_All() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_All() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status All(::grpc::ServerContext* /*context*/, const ::txpool::AllRequest* /*request*/, ::txpool::AllReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAll(::grpc::ServerContext* context, ::txpool::AllRequest* request, ::grpc::ServerAsyncResponseWriter< ::txpool::AllReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_OnAdd : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_OnAdd() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_OnAdd() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OnAdd(::grpc::ServerContext* /*context*/, const ::txpool::OnAddRequest* /*request*/, ::grpc::ServerWriter< ::txpool::OnAddReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOnAdd(::grpc::ServerContext* context, ::txpool::OnAddRequest* request, ::grpc::ServerAsyncWriter< ::txpool::OnAddReply>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(5, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Status : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Status() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_Status() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Status(::grpc::ServerContext* /*context*/, const ::txpool::StatusRequest* /*request*/, ::txpool::StatusReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStatus(::grpc::ServerContext* context, ::txpool::StatusRequest* request, ::grpc::ServerAsyncResponseWriter< ::txpool::StatusReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Version<WithAsyncMethod_FindUnknown<WithAsyncMethod_Add<WithAsyncMethod_Transactions<WithAsyncMethod_All<WithAsyncMethod_OnAdd<WithAsyncMethod_Status<Service > > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Version : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Version() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::types::VersionReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::google::protobuf::Empty* request, ::types::VersionReply* response) { return this->Version(context, request, response); }));}
    void SetMessageAllocatorFor_Version(
        ::grpc::experimental::MessageAllocator< ::google::protobuf::Empty, ::types::VersionReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::types::VersionReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Version() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Version(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::types::VersionReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Version(
      ::grpc::CallbackServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::types::VersionReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Version(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::types::VersionReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_FindUnknown : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_FindUnknown() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::txpool::TxHashes, ::txpool::TxHashes>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::txpool::TxHashes* request, ::txpool::TxHashes* response) { return this->FindUnknown(context, request, response); }));}
    void SetMessageAllocatorFor_FindUnknown(
        ::grpc::experimental::MessageAllocator< ::txpool::TxHashes, ::txpool::TxHashes>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::txpool::TxHashes, ::txpool::TxHashes>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_FindUnknown() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindUnknown(::grpc::ServerContext* /*context*/, const ::txpool::TxHashes* /*request*/, ::txpool::TxHashes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* FindUnknown(
      ::grpc::CallbackServerContext* /*context*/, const ::txpool::TxHashes* /*request*/, ::txpool::TxHashes* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* FindUnknown(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::txpool::TxHashes* /*request*/, ::txpool::TxHashes* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Add : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Add() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::txpool::AddRequest, ::txpool::AddReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::txpool::AddRequest* request, ::txpool::AddReply* response) { return this->Add(context, request, response); }));}
    void SetMessageAllocatorFor_Add(
        ::grpc::experimental::MessageAllocator< ::txpool::AddRequest, ::txpool::AddReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::txpool::AddRequest, ::txpool::AddReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Add() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Add(::grpc::ServerContext* /*context*/, const ::txpool::AddRequest* /*request*/, ::txpool::AddReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Add(
      ::grpc::CallbackServerContext* /*context*/, const ::txpool::AddRequest* /*request*/, ::txpool::AddReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Add(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::txpool::AddRequest* /*request*/, ::txpool::AddReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Transactions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Transactions() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::txpool::TransactionsRequest, ::txpool::TransactionsReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::txpool::TransactionsRequest* request, ::txpool::TransactionsReply* response) { return this->Transactions(context, request, response); }));}
    void SetMessageAllocatorFor_Transactions(
        ::grpc::experimental::MessageAllocator< ::txpool::TransactionsRequest, ::txpool::TransactionsReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::txpool::TransactionsRequest, ::txpool::TransactionsReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Transactions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Transactions(::grpc::ServerContext* /*context*/, const ::txpool::TransactionsRequest* /*request*/, ::txpool::TransactionsReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Transactions(
      ::grpc::CallbackServerContext* /*context*/, const ::txpool::TransactionsRequest* /*request*/, ::txpool::TransactionsReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Transactions(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::txpool::TransactionsRequest* /*request*/, ::txpool::TransactionsReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_All : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_All() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::txpool::AllRequest, ::txpool::AllReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::txpool::AllRequest* request, ::txpool::AllReply* response) { return this->All(context, request, response); }));}
    void SetMessageAllocatorFor_All(
        ::grpc::experimental::MessageAllocator< ::txpool::AllRequest, ::txpool::AllReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(4);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::txpool::AllRequest, ::txpool::AllReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_All() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status All(::grpc::ServerContext* /*context*/, const ::txpool::AllRequest* /*request*/, ::txpool::AllReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* All(
      ::grpc::CallbackServerContext* /*context*/, const ::txpool::AllRequest* /*request*/, ::txpool::AllReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* All(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::txpool::AllRequest* /*request*/, ::txpool::AllReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_OnAdd : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_OnAdd() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(5,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::txpool::OnAddRequest, ::txpool::OnAddReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::txpool::OnAddRequest* request) { return this->OnAdd(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_OnAdd() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OnAdd(::grpc::ServerContext* /*context*/, const ::txpool::OnAddRequest* /*request*/, ::grpc::ServerWriter< ::txpool::OnAddReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::txpool::OnAddReply>* OnAdd(
      ::grpc::CallbackServerContext* /*context*/, const ::txpool::OnAddRequest* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::txpool::OnAddReply>* OnAdd(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::txpool::OnAddRequest* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Status : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Status() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(6,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::txpool::StatusRequest, ::txpool::StatusReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::txpool::StatusRequest* request, ::txpool::StatusReply* response) { return this->Status(context, request, response); }));}
    void SetMessageAllocatorFor_Status(
        ::grpc::experimental::MessageAllocator< ::txpool::StatusRequest, ::txpool::StatusReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(6);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::txpool::StatusRequest, ::txpool::StatusReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Status() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Status(::grpc::ServerContext* /*context*/, const ::txpool::StatusRequest* /*request*/, ::txpool::StatusReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Status(
      ::grpc::CallbackServerContext* /*context*/, const ::txpool::StatusRequest* /*request*/, ::txpool::StatusReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Status(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::txpool::StatusRequest* /*request*/, ::txpool::StatusReply* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_Version<ExperimentalWithCallbackMethod_FindUnknown<ExperimentalWithCallbackMethod_Add<ExperimentalWithCallbackMethod_Transactions<ExperimentalWithCallbackMethod_All<ExperimentalWithCallbackMethod_OnAdd<ExperimentalWithCallbackMethod_Status<Service > > > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_Version<ExperimentalWithCallbackMethod_FindUnknown<ExperimentalWithCallbackMethod_Add<ExperimentalWithCallbackMethod_Transactions<ExperimentalWithCallbackMethod_All<ExperimentalWithCallbackMethod_OnAdd<ExperimentalWithCallbackMethod_Status<Service > > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Version : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Version() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Version() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Version(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::types::VersionReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_FindUnknown : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_FindUnknown() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_FindUnknown() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindUnknown(::grpc::ServerContext* /*context*/, const ::txpool::TxHashes* /*request*/, ::txpool::TxHashes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Add : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Add() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Add() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Add(::grpc::ServerContext* /*context*/, const ::txpool::AddRequest* /*request*/, ::txpool::AddReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Transactions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Transactions() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_Transactions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Transactions(::grpc::ServerContext* /*context*/, const ::txpool::TransactionsRequest* /*request*/, ::txpool::TransactionsReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_All : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_All() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_All() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status All(::grpc::ServerContext* /*context*/, const ::txpool::AllRequest* /*request*/, ::txpool::AllReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_OnAdd : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_OnAdd() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_OnAdd() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OnAdd(::grpc::ServerContext* /*context*/, const ::txpool::OnAddRequest* /*request*/, ::grpc::ServerWriter< ::txpool::OnAddReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Status : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Status() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_Status() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Status(::grpc::ServerContext* /*context*/, const ::txpool::StatusRequest* /*request*/, ::txpool::StatusReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Version : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Version() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Version() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Version(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::types::VersionReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestVersion(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_FindUnknown : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_FindUnknown() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_FindUnknown() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindUnknown(::grpc::ServerContext* /*context*/, const ::txpool::TxHashes* /*request*/, ::txpool::TxHashes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFindUnknown(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Add : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Add() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Add() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Add(::grpc::ServerContext* /*context*/, const ::txpool::AddRequest* /*request*/, ::txpool::AddReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAdd(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Transactions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Transactions() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_Transactions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Transactions(::grpc::ServerContext* /*context*/, const ::txpool::TransactionsRequest* /*request*/, ::txpool::TransactionsReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTransactions(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_All : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_All() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_All() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status All(::grpc::ServerContext* /*context*/, const ::txpool::AllRequest* /*request*/, ::txpool::AllReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAll(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_OnAdd : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_OnAdd() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_OnAdd() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OnAdd(::grpc::ServerContext* /*context*/, const ::txpool::OnAddRequest* /*request*/, ::grpc::ServerWriter< ::txpool::OnAddReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOnAdd(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(5, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Status : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Status() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_Status() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Status(::grpc::ServerContext* /*context*/, const ::txpool::StatusRequest* /*request*/, ::txpool::StatusReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStatus(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Version : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Version() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Version(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Version() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Version(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::types::VersionReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Version(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Version(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_FindUnknown : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_FindUnknown() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->FindUnknown(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_FindUnknown() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindUnknown(::grpc::ServerContext* /*context*/, const ::txpool::TxHashes* /*request*/, ::txpool::TxHashes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* FindUnknown(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* FindUnknown(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Add : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Add() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Add(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Add() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Add(::grpc::ServerContext* /*context*/, const ::txpool::AddRequest* /*request*/, ::txpool::AddReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Add(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Add(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Transactions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Transactions() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Transactions(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Transactions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Transactions(::grpc::ServerContext* /*context*/, const ::txpool::TransactionsRequest* /*request*/, ::txpool::TransactionsReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Transactions(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Transactions(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_All : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_All() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->All(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_All() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status All(::grpc::ServerContext* /*context*/, const ::txpool::AllRequest* /*request*/, ::txpool::AllReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* All(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* All(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_OnAdd : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_OnAdd() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(5,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->OnAdd(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_OnAdd() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OnAdd(::grpc::ServerContext* /*context*/, const ::txpool::OnAddRequest* /*request*/, ::grpc::ServerWriter< ::txpool::OnAddReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* OnAdd(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* OnAdd(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Status : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Status() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(6,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Status(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Status() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Status(::grpc::ServerContext* /*context*/, const ::txpool::StatusRequest* /*request*/, ::txpool::StatusReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Status(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Status(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Version : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Version() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::protobuf::Empty, ::types::VersionReply>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::google::protobuf::Empty, ::types::VersionReply>* streamer) {
                       return this->StreamedVersion(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Version() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Version(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::types::VersionReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedVersion(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::protobuf::Empty,::types::VersionReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_FindUnknown : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_FindUnknown() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::txpool::TxHashes, ::txpool::TxHashes>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::txpool::TxHashes, ::txpool::TxHashes>* streamer) {
                       return this->StreamedFindUnknown(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_FindUnknown() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status FindUnknown(::grpc::ServerContext* /*context*/, const ::txpool::TxHashes* /*request*/, ::txpool::TxHashes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedFindUnknown(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::txpool::TxHashes,::txpool::TxHashes>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Add : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Add() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::txpool::AddRequest, ::txpool::AddReply>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::txpool::AddRequest, ::txpool::AddReply>* streamer) {
                       return this->StreamedAdd(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Add() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Add(::grpc::ServerContext* /*context*/, const ::txpool::AddRequest* /*request*/, ::txpool::AddReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAdd(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::txpool::AddRequest,::txpool::AddReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Transactions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Transactions() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::txpool::TransactionsRequest, ::txpool::TransactionsReply>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::txpool::TransactionsRequest, ::txpool::TransactionsReply>* streamer) {
                       return this->StreamedTransactions(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Transactions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Transactions(::grpc::ServerContext* /*context*/, const ::txpool::TransactionsRequest* /*request*/, ::txpool::TransactionsReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTransactions(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::txpool::TransactionsRequest,::txpool::TransactionsReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_All : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_All() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::txpool::AllRequest, ::txpool::AllReply>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::txpool::AllRequest, ::txpool::AllReply>* streamer) {
                       return this->StreamedAll(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_All() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status All(::grpc::ServerContext* /*context*/, const ::txpool::AllRequest* /*request*/, ::txpool::AllReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAll(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::txpool::AllRequest,::txpool::AllReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Status : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Status() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::txpool::StatusRequest, ::txpool::StatusReply>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::txpool::StatusRequest, ::txpool::StatusReply>* streamer) {
                       return this->StreamedStatus(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Status() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Status(::grpc::ServerContext* /*context*/, const ::txpool::StatusRequest* /*request*/, ::txpool::StatusReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStatus(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::txpool::StatusRequest,::txpool::StatusReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Version<WithStreamedUnaryMethod_FindUnknown<WithStreamedUnaryMethod_Add<WithStreamedUnaryMethod_Transactions<WithStreamedUnaryMethod_All<WithStreamedUnaryMethod_Status<Service > > > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_OnAdd : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_OnAdd() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::txpool::OnAddRequest, ::txpool::OnAddReply>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerSplitStreamer<
                     ::txpool::OnAddRequest, ::txpool::OnAddReply>* streamer) {
                       return this->StreamedOnAdd(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_OnAdd() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status OnAdd(::grpc::ServerContext* /*context*/, const ::txpool::OnAddRequest* /*request*/, ::grpc::ServerWriter< ::txpool::OnAddReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedOnAdd(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::txpool::OnAddRequest,::txpool::OnAddReply>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_OnAdd<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_Version<WithStreamedUnaryMethod_FindUnknown<WithStreamedUnaryMethod_Add<WithStreamedUnaryMethod_Transactions<WithStreamedUnaryMethod_All<WithSplitStreamingMethod_OnAdd<WithStreamedUnaryMethod_Status<Service > > > > > > > StreamedService;
};

}  // namespace txpool


#endif  // GRPC_txpool_2ftxpool_2eproto__INCLUDED
