// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: txpool/txpool.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_txpool_2ftxpool_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_txpool_2ftxpool_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
#include "types/types.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_txpool_2ftxpool_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_txpool_2ftxpool_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_txpool_2ftxpool_2eproto;
namespace txpool {
class AddReply;
class AddReplyDefaultTypeInternal;
extern AddReplyDefaultTypeInternal _AddReply_default_instance_;
class AddRequest;
class AddRequestDefaultTypeInternal;
extern AddRequestDefaultTypeInternal _AddRequest_default_instance_;
class OnAddReply;
class OnAddReplyDefaultTypeInternal;
extern OnAddReplyDefaultTypeInternal _OnAddReply_default_instance_;
class OnAddRequest;
class OnAddRequestDefaultTypeInternal;
extern OnAddRequestDefaultTypeInternal _OnAddRequest_default_instance_;
class TransactionsReply;
class TransactionsReplyDefaultTypeInternal;
extern TransactionsReplyDefaultTypeInternal _TransactionsReply_default_instance_;
class TransactionsRequest;
class TransactionsRequestDefaultTypeInternal;
extern TransactionsRequestDefaultTypeInternal _TransactionsRequest_default_instance_;
class TxHashes;
class TxHashesDefaultTypeInternal;
extern TxHashesDefaultTypeInternal _TxHashes_default_instance_;
}  // namespace txpool
PROTOBUF_NAMESPACE_OPEN
template<> ::txpool::AddReply* Arena::CreateMaybeMessage<::txpool::AddReply>(Arena*);
template<> ::txpool::AddRequest* Arena::CreateMaybeMessage<::txpool::AddRequest>(Arena*);
template<> ::txpool::OnAddReply* Arena::CreateMaybeMessage<::txpool::OnAddReply>(Arena*);
template<> ::txpool::OnAddRequest* Arena::CreateMaybeMessage<::txpool::OnAddRequest>(Arena*);
template<> ::txpool::TransactionsReply* Arena::CreateMaybeMessage<::txpool::TransactionsReply>(Arena*);
template<> ::txpool::TransactionsRequest* Arena::CreateMaybeMessage<::txpool::TransactionsRequest>(Arena*);
template<> ::txpool::TxHashes* Arena::CreateMaybeMessage<::txpool::TxHashes>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace txpool {

enum ImportResult : int {
  SUCCESS = 0,
  ALREADY_EXISTS = 1,
  FEE_TOO_LOW = 2,
  STALE = 3,
  INVALID = 4,
  INTERNAL_ERROR = 5,
  ImportResult_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ImportResult_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ImportResult_IsValid(int value);
constexpr ImportResult ImportResult_MIN = SUCCESS;
constexpr ImportResult ImportResult_MAX = INTERNAL_ERROR;
constexpr int ImportResult_ARRAYSIZE = ImportResult_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ImportResult_descriptor();
template<typename T>
inline const std::string& ImportResult_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ImportResult>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ImportResult_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ImportResult_descriptor(), enum_t_value);
}
inline bool ImportResult_Parse(
    const std::string& name, ImportResult* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ImportResult>(
    ImportResult_descriptor(), name, value);
}
// ===================================================================

class TxHashes PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:txpool.TxHashes) */ {
 public:
  inline TxHashes() : TxHashes(nullptr) {};
  virtual ~TxHashes();

  TxHashes(const TxHashes& from);
  TxHashes(TxHashes&& from) noexcept
    : TxHashes() {
    *this = ::std::move(from);
  }

  inline TxHashes& operator=(const TxHashes& from) {
    CopyFrom(from);
    return *this;
  }
  inline TxHashes& operator=(TxHashes&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TxHashes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TxHashes* internal_default_instance() {
    return reinterpret_cast<const TxHashes*>(
               &_TxHashes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TxHashes& a, TxHashes& b) {
    a.Swap(&b);
  }
  inline void Swap(TxHashes* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TxHashes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TxHashes* New() const final {
    return CreateMaybeMessage<TxHashes>(nullptr);
  }

  TxHashes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TxHashes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TxHashes& from);
  void MergeFrom(const TxHashes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TxHashes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "txpool.TxHashes";
  }
  protected:
  explicit TxHashes(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_txpool_2ftxpool_2eproto);
    return ::descriptor_table_txpool_2ftxpool_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHashesFieldNumber = 1,
  };
  // repeated .types.H256 hashes = 1;
  int hashes_size() const;
  private:
  int _internal_hashes_size() const;
  public:
  void clear_hashes();
  ::types::H256* mutable_hashes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::H256 >*
      mutable_hashes();
  private:
  const ::types::H256& _internal_hashes(int index) const;
  ::types::H256* _internal_add_hashes();
  public:
  const ::types::H256& hashes(int index) const;
  ::types::H256* add_hashes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::H256 >&
      hashes() const;

  // @@protoc_insertion_point(class_scope:txpool.TxHashes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::H256 > hashes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_txpool_2ftxpool_2eproto;
};
// -------------------------------------------------------------------

class AddRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:txpool.AddRequest) */ {
 public:
  inline AddRequest() : AddRequest(nullptr) {};
  virtual ~AddRequest();

  AddRequest(const AddRequest& from);
  AddRequest(AddRequest&& from) noexcept
    : AddRequest() {
    *this = ::std::move(from);
  }

  inline AddRequest& operator=(const AddRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddRequest& operator=(AddRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddRequest* internal_default_instance() {
    return reinterpret_cast<const AddRequest*>(
               &_AddRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AddRequest& a, AddRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddRequest* New() const final {
    return CreateMaybeMessage<AddRequest>(nullptr);
  }

  AddRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddRequest& from);
  void MergeFrom(const AddRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "txpool.AddRequest";
  }
  protected:
  explicit AddRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_txpool_2ftxpool_2eproto);
    return ::descriptor_table_txpool_2ftxpool_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRlpTxsFieldNumber = 1,
  };
  // repeated bytes rlpTxs = 1;
  int rlptxs_size() const;
  private:
  int _internal_rlptxs_size() const;
  public:
  void clear_rlptxs();
  const std::string& rlptxs(int index) const;
  std::string* mutable_rlptxs(int index);
  void set_rlptxs(int index, const std::string& value);
  void set_rlptxs(int index, std::string&& value);
  void set_rlptxs(int index, const char* value);
  void set_rlptxs(int index, const void* value, size_t size);
  std::string* add_rlptxs();
  void add_rlptxs(const std::string& value);
  void add_rlptxs(std::string&& value);
  void add_rlptxs(const char* value);
  void add_rlptxs(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& rlptxs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_rlptxs();
  private:
  const std::string& _internal_rlptxs(int index) const;
  std::string* _internal_add_rlptxs();
  public:

  // @@protoc_insertion_point(class_scope:txpool.AddRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> rlptxs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_txpool_2ftxpool_2eproto;
};
// -------------------------------------------------------------------

class AddReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:txpool.AddReply) */ {
 public:
  inline AddReply() : AddReply(nullptr) {};
  virtual ~AddReply();

  AddReply(const AddReply& from);
  AddReply(AddReply&& from) noexcept
    : AddReply() {
    *this = ::std::move(from);
  }

  inline AddReply& operator=(const AddReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddReply& operator=(AddReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddReply* internal_default_instance() {
    return reinterpret_cast<const AddReply*>(
               &_AddReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AddReply& a, AddReply& b) {
    a.Swap(&b);
  }
  inline void Swap(AddReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddReply* New() const final {
    return CreateMaybeMessage<AddReply>(nullptr);
  }

  AddReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddReply& from);
  void MergeFrom(const AddReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "txpool.AddReply";
  }
  protected:
  explicit AddReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_txpool_2ftxpool_2eproto);
    return ::descriptor_table_txpool_2ftxpool_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImportedFieldNumber = 1,
    kErrorsFieldNumber = 2,
  };
  // repeated .txpool.ImportResult imported = 1;
  int imported_size() const;
  private:
  int _internal_imported_size() const;
  public:
  void clear_imported();
  private:
  ::txpool::ImportResult _internal_imported(int index) const;
  void _internal_add_imported(::txpool::ImportResult value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_imported();
  public:
  ::txpool::ImportResult imported(int index) const;
  void set_imported(int index, ::txpool::ImportResult value);
  void add_imported(::txpool::ImportResult value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& imported() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_imported();

  // repeated string errors = 2;
  int errors_size() const;
  private:
  int _internal_errors_size() const;
  public:
  void clear_errors();
  const std::string& errors(int index) const;
  std::string* mutable_errors(int index);
  void set_errors(int index, const std::string& value);
  void set_errors(int index, std::string&& value);
  void set_errors(int index, const char* value);
  void set_errors(int index, const char* value, size_t size);
  std::string* add_errors();
  void add_errors(const std::string& value);
  void add_errors(std::string&& value);
  void add_errors(const char* value);
  void add_errors(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& errors() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_errors();
  private:
  const std::string& _internal_errors(int index) const;
  std::string* _internal_add_errors();
  public:

  // @@protoc_insertion_point(class_scope:txpool.AddReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> imported_;
  mutable std::atomic<int> _imported_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> errors_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_txpool_2ftxpool_2eproto;
};
// -------------------------------------------------------------------

class TransactionsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:txpool.TransactionsRequest) */ {
 public:
  inline TransactionsRequest() : TransactionsRequest(nullptr) {};
  virtual ~TransactionsRequest();

  TransactionsRequest(const TransactionsRequest& from);
  TransactionsRequest(TransactionsRequest&& from) noexcept
    : TransactionsRequest() {
    *this = ::std::move(from);
  }

  inline TransactionsRequest& operator=(const TransactionsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransactionsRequest& operator=(TransactionsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransactionsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransactionsRequest* internal_default_instance() {
    return reinterpret_cast<const TransactionsRequest*>(
               &_TransactionsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TransactionsRequest& a, TransactionsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TransactionsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransactionsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransactionsRequest* New() const final {
    return CreateMaybeMessage<TransactionsRequest>(nullptr);
  }

  TransactionsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransactionsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransactionsRequest& from);
  void MergeFrom(const TransactionsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransactionsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "txpool.TransactionsRequest";
  }
  protected:
  explicit TransactionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_txpool_2ftxpool_2eproto);
    return ::descriptor_table_txpool_2ftxpool_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHashesFieldNumber = 1,
  };
  // repeated .types.H256 hashes = 1;
  int hashes_size() const;
  private:
  int _internal_hashes_size() const;
  public:
  void clear_hashes();
  ::types::H256* mutable_hashes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::H256 >*
      mutable_hashes();
  private:
  const ::types::H256& _internal_hashes(int index) const;
  ::types::H256* _internal_add_hashes();
  public:
  const ::types::H256& hashes(int index) const;
  ::types::H256* add_hashes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::H256 >&
      hashes() const;

  // @@protoc_insertion_point(class_scope:txpool.TransactionsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::H256 > hashes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_txpool_2ftxpool_2eproto;
};
// -------------------------------------------------------------------

class TransactionsReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:txpool.TransactionsReply) */ {
 public:
  inline TransactionsReply() : TransactionsReply(nullptr) {};
  virtual ~TransactionsReply();

  TransactionsReply(const TransactionsReply& from);
  TransactionsReply(TransactionsReply&& from) noexcept
    : TransactionsReply() {
    *this = ::std::move(from);
  }

  inline TransactionsReply& operator=(const TransactionsReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransactionsReply& operator=(TransactionsReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransactionsReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransactionsReply* internal_default_instance() {
    return reinterpret_cast<const TransactionsReply*>(
               &_TransactionsReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(TransactionsReply& a, TransactionsReply& b) {
    a.Swap(&b);
  }
  inline void Swap(TransactionsReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransactionsReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransactionsReply* New() const final {
    return CreateMaybeMessage<TransactionsReply>(nullptr);
  }

  TransactionsReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransactionsReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransactionsReply& from);
  void MergeFrom(const TransactionsReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransactionsReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "txpool.TransactionsReply";
  }
  protected:
  explicit TransactionsReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_txpool_2ftxpool_2eproto);
    return ::descriptor_table_txpool_2ftxpool_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRlpTxsFieldNumber = 1,
  };
  // repeated bytes rlpTxs = 1;
  int rlptxs_size() const;
  private:
  int _internal_rlptxs_size() const;
  public:
  void clear_rlptxs();
  const std::string& rlptxs(int index) const;
  std::string* mutable_rlptxs(int index);
  void set_rlptxs(int index, const std::string& value);
  void set_rlptxs(int index, std::string&& value);
  void set_rlptxs(int index, const char* value);
  void set_rlptxs(int index, const void* value, size_t size);
  std::string* add_rlptxs();
  void add_rlptxs(const std::string& value);
  void add_rlptxs(std::string&& value);
  void add_rlptxs(const char* value);
  void add_rlptxs(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& rlptxs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_rlptxs();
  private:
  const std::string& _internal_rlptxs(int index) const;
  std::string* _internal_add_rlptxs();
  public:

  // @@protoc_insertion_point(class_scope:txpool.TransactionsReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> rlptxs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_txpool_2ftxpool_2eproto;
};
// -------------------------------------------------------------------

class OnAddRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:txpool.OnAddRequest) */ {
 public:
  inline OnAddRequest() : OnAddRequest(nullptr) {};
  virtual ~OnAddRequest();

  OnAddRequest(const OnAddRequest& from);
  OnAddRequest(OnAddRequest&& from) noexcept
    : OnAddRequest() {
    *this = ::std::move(from);
  }

  inline OnAddRequest& operator=(const OnAddRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline OnAddRequest& operator=(OnAddRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OnAddRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OnAddRequest* internal_default_instance() {
    return reinterpret_cast<const OnAddRequest*>(
               &_OnAddRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(OnAddRequest& a, OnAddRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(OnAddRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OnAddRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OnAddRequest* New() const final {
    return CreateMaybeMessage<OnAddRequest>(nullptr);
  }

  OnAddRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OnAddRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OnAddRequest& from);
  void MergeFrom(const OnAddRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OnAddRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "txpool.OnAddRequest";
  }
  protected:
  explicit OnAddRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_txpool_2ftxpool_2eproto);
    return ::descriptor_table_txpool_2ftxpool_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:txpool.OnAddRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_txpool_2ftxpool_2eproto;
};
// -------------------------------------------------------------------

class OnAddReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:txpool.OnAddReply) */ {
 public:
  inline OnAddReply() : OnAddReply(nullptr) {};
  virtual ~OnAddReply();

  OnAddReply(const OnAddReply& from);
  OnAddReply(OnAddReply&& from) noexcept
    : OnAddReply() {
    *this = ::std::move(from);
  }

  inline OnAddReply& operator=(const OnAddReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline OnAddReply& operator=(OnAddReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OnAddReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OnAddReply* internal_default_instance() {
    return reinterpret_cast<const OnAddReply*>(
               &_OnAddReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(OnAddReply& a, OnAddReply& b) {
    a.Swap(&b);
  }
  inline void Swap(OnAddReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OnAddReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OnAddReply* New() const final {
    return CreateMaybeMessage<OnAddReply>(nullptr);
  }

  OnAddReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OnAddReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OnAddReply& from);
  void MergeFrom(const OnAddReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OnAddReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "txpool.OnAddReply";
  }
  protected:
  explicit OnAddReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_txpool_2ftxpool_2eproto);
    return ::descriptor_table_txpool_2ftxpool_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRplTxsFieldNumber = 1,
  };
  // repeated bytes rplTxs = 1;
  int rpltxs_size() const;
  private:
  int _internal_rpltxs_size() const;
  public:
  void clear_rpltxs();
  const std::string& rpltxs(int index) const;
  std::string* mutable_rpltxs(int index);
  void set_rpltxs(int index, const std::string& value);
  void set_rpltxs(int index, std::string&& value);
  void set_rpltxs(int index, const char* value);
  void set_rpltxs(int index, const void* value, size_t size);
  std::string* add_rpltxs();
  void add_rpltxs(const std::string& value);
  void add_rpltxs(std::string&& value);
  void add_rpltxs(const char* value);
  void add_rpltxs(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& rpltxs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_rpltxs();
  private:
  const std::string& _internal_rpltxs(int index) const;
  std::string* _internal_add_rpltxs();
  public:

  // @@protoc_insertion_point(class_scope:txpool.OnAddReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> rpltxs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_txpool_2ftxpool_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TxHashes

// repeated .types.H256 hashes = 1;
inline int TxHashes::_internal_hashes_size() const {
  return hashes_.size();
}
inline int TxHashes::hashes_size() const {
  return _internal_hashes_size();
}
inline ::types::H256* TxHashes::mutable_hashes(int index) {
  // @@protoc_insertion_point(field_mutable:txpool.TxHashes.hashes)
  return hashes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::H256 >*
TxHashes::mutable_hashes() {
  // @@protoc_insertion_point(field_mutable_list:txpool.TxHashes.hashes)
  return &hashes_;
}
inline const ::types::H256& TxHashes::_internal_hashes(int index) const {
  return hashes_.Get(index);
}
inline const ::types::H256& TxHashes::hashes(int index) const {
  // @@protoc_insertion_point(field_get:txpool.TxHashes.hashes)
  return _internal_hashes(index);
}
inline ::types::H256* TxHashes::_internal_add_hashes() {
  return hashes_.Add();
}
inline ::types::H256* TxHashes::add_hashes() {
  // @@protoc_insertion_point(field_add:txpool.TxHashes.hashes)
  return _internal_add_hashes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::H256 >&
TxHashes::hashes() const {
  // @@protoc_insertion_point(field_list:txpool.TxHashes.hashes)
  return hashes_;
}

// -------------------------------------------------------------------

// AddRequest

// repeated bytes rlpTxs = 1;
inline int AddRequest::_internal_rlptxs_size() const {
  return rlptxs_.size();
}
inline int AddRequest::rlptxs_size() const {
  return _internal_rlptxs_size();
}
inline void AddRequest::clear_rlptxs() {
  rlptxs_.Clear();
}
inline std::string* AddRequest::add_rlptxs() {
  // @@protoc_insertion_point(field_add_mutable:txpool.AddRequest.rlpTxs)
  return _internal_add_rlptxs();
}
inline const std::string& AddRequest::_internal_rlptxs(int index) const {
  return rlptxs_.Get(index);
}
inline const std::string& AddRequest::rlptxs(int index) const {
  // @@protoc_insertion_point(field_get:txpool.AddRequest.rlpTxs)
  return _internal_rlptxs(index);
}
inline std::string* AddRequest::mutable_rlptxs(int index) {
  // @@protoc_insertion_point(field_mutable:txpool.AddRequest.rlpTxs)
  return rlptxs_.Mutable(index);
}
inline void AddRequest::set_rlptxs(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:txpool.AddRequest.rlpTxs)
  rlptxs_.Mutable(index)->assign(value);
}
inline void AddRequest::set_rlptxs(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:txpool.AddRequest.rlpTxs)
  rlptxs_.Mutable(index)->assign(std::move(value));
}
inline void AddRequest::set_rlptxs(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  rlptxs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:txpool.AddRequest.rlpTxs)
}
inline void AddRequest::set_rlptxs(int index, const void* value, size_t size) {
  rlptxs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:txpool.AddRequest.rlpTxs)
}
inline std::string* AddRequest::_internal_add_rlptxs() {
  return rlptxs_.Add();
}
inline void AddRequest::add_rlptxs(const std::string& value) {
  rlptxs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:txpool.AddRequest.rlpTxs)
}
inline void AddRequest::add_rlptxs(std::string&& value) {
  rlptxs_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:txpool.AddRequest.rlpTxs)
}
inline void AddRequest::add_rlptxs(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  rlptxs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:txpool.AddRequest.rlpTxs)
}
inline void AddRequest::add_rlptxs(const void* value, size_t size) {
  rlptxs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:txpool.AddRequest.rlpTxs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AddRequest::rlptxs() const {
  // @@protoc_insertion_point(field_list:txpool.AddRequest.rlpTxs)
  return rlptxs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
AddRequest::mutable_rlptxs() {
  // @@protoc_insertion_point(field_mutable_list:txpool.AddRequest.rlpTxs)
  return &rlptxs_;
}

// -------------------------------------------------------------------

// AddReply

// repeated .txpool.ImportResult imported = 1;
inline int AddReply::_internal_imported_size() const {
  return imported_.size();
}
inline int AddReply::imported_size() const {
  return _internal_imported_size();
}
inline void AddReply::clear_imported() {
  imported_.Clear();
}
inline ::txpool::ImportResult AddReply::_internal_imported(int index) const {
  return static_cast< ::txpool::ImportResult >(imported_.Get(index));
}
inline ::txpool::ImportResult AddReply::imported(int index) const {
  // @@protoc_insertion_point(field_get:txpool.AddReply.imported)
  return _internal_imported(index);
}
inline void AddReply::set_imported(int index, ::txpool::ImportResult value) {
  imported_.Set(index, value);
  // @@protoc_insertion_point(field_set:txpool.AddReply.imported)
}
inline void AddReply::_internal_add_imported(::txpool::ImportResult value) {
  imported_.Add(value);
}
inline void AddReply::add_imported(::txpool::ImportResult value) {
  // @@protoc_insertion_point(field_add:txpool.AddReply.imported)
  _internal_add_imported(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
AddReply::imported() const {
  // @@protoc_insertion_point(field_list:txpool.AddReply.imported)
  return imported_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
AddReply::_internal_mutable_imported() {
  return &imported_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
AddReply::mutable_imported() {
  // @@protoc_insertion_point(field_mutable_list:txpool.AddReply.imported)
  return _internal_mutable_imported();
}

// repeated string errors = 2;
inline int AddReply::_internal_errors_size() const {
  return errors_.size();
}
inline int AddReply::errors_size() const {
  return _internal_errors_size();
}
inline void AddReply::clear_errors() {
  errors_.Clear();
}
inline std::string* AddReply::add_errors() {
  // @@protoc_insertion_point(field_add_mutable:txpool.AddReply.errors)
  return _internal_add_errors();
}
inline const std::string& AddReply::_internal_errors(int index) const {
  return errors_.Get(index);
}
inline const std::string& AddReply::errors(int index) const {
  // @@protoc_insertion_point(field_get:txpool.AddReply.errors)
  return _internal_errors(index);
}
inline std::string* AddReply::mutable_errors(int index) {
  // @@protoc_insertion_point(field_mutable:txpool.AddReply.errors)
  return errors_.Mutable(index);
}
inline void AddReply::set_errors(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:txpool.AddReply.errors)
  errors_.Mutable(index)->assign(value);
}
inline void AddReply::set_errors(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:txpool.AddReply.errors)
  errors_.Mutable(index)->assign(std::move(value));
}
inline void AddReply::set_errors(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  errors_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:txpool.AddReply.errors)
}
inline void AddReply::set_errors(int index, const char* value, size_t size) {
  errors_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:txpool.AddReply.errors)
}
inline std::string* AddReply::_internal_add_errors() {
  return errors_.Add();
}
inline void AddReply::add_errors(const std::string& value) {
  errors_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:txpool.AddReply.errors)
}
inline void AddReply::add_errors(std::string&& value) {
  errors_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:txpool.AddReply.errors)
}
inline void AddReply::add_errors(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  errors_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:txpool.AddReply.errors)
}
inline void AddReply::add_errors(const char* value, size_t size) {
  errors_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:txpool.AddReply.errors)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AddReply::errors() const {
  // @@protoc_insertion_point(field_list:txpool.AddReply.errors)
  return errors_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
AddReply::mutable_errors() {
  // @@protoc_insertion_point(field_mutable_list:txpool.AddReply.errors)
  return &errors_;
}

// -------------------------------------------------------------------

// TransactionsRequest

// repeated .types.H256 hashes = 1;
inline int TransactionsRequest::_internal_hashes_size() const {
  return hashes_.size();
}
inline int TransactionsRequest::hashes_size() const {
  return _internal_hashes_size();
}
inline ::types::H256* TransactionsRequest::mutable_hashes(int index) {
  // @@protoc_insertion_point(field_mutable:txpool.TransactionsRequest.hashes)
  return hashes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::H256 >*
TransactionsRequest::mutable_hashes() {
  // @@protoc_insertion_point(field_mutable_list:txpool.TransactionsRequest.hashes)
  return &hashes_;
}
inline const ::types::H256& TransactionsRequest::_internal_hashes(int index) const {
  return hashes_.Get(index);
}
inline const ::types::H256& TransactionsRequest::hashes(int index) const {
  // @@protoc_insertion_point(field_get:txpool.TransactionsRequest.hashes)
  return _internal_hashes(index);
}
inline ::types::H256* TransactionsRequest::_internal_add_hashes() {
  return hashes_.Add();
}
inline ::types::H256* TransactionsRequest::add_hashes() {
  // @@protoc_insertion_point(field_add:txpool.TransactionsRequest.hashes)
  return _internal_add_hashes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::H256 >&
TransactionsRequest::hashes() const {
  // @@protoc_insertion_point(field_list:txpool.TransactionsRequest.hashes)
  return hashes_;
}

// -------------------------------------------------------------------

// TransactionsReply

// repeated bytes rlpTxs = 1;
inline int TransactionsReply::_internal_rlptxs_size() const {
  return rlptxs_.size();
}
inline int TransactionsReply::rlptxs_size() const {
  return _internal_rlptxs_size();
}
inline void TransactionsReply::clear_rlptxs() {
  rlptxs_.Clear();
}
inline std::string* TransactionsReply::add_rlptxs() {
  // @@protoc_insertion_point(field_add_mutable:txpool.TransactionsReply.rlpTxs)
  return _internal_add_rlptxs();
}
inline const std::string& TransactionsReply::_internal_rlptxs(int index) const {
  return rlptxs_.Get(index);
}
inline const std::string& TransactionsReply::rlptxs(int index) const {
  // @@protoc_insertion_point(field_get:txpool.TransactionsReply.rlpTxs)
  return _internal_rlptxs(index);
}
inline std::string* TransactionsReply::mutable_rlptxs(int index) {
  // @@protoc_insertion_point(field_mutable:txpool.TransactionsReply.rlpTxs)
  return rlptxs_.Mutable(index);
}
inline void TransactionsReply::set_rlptxs(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:txpool.TransactionsReply.rlpTxs)
  rlptxs_.Mutable(index)->assign(value);
}
inline void TransactionsReply::set_rlptxs(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:txpool.TransactionsReply.rlpTxs)
  rlptxs_.Mutable(index)->assign(std::move(value));
}
inline void TransactionsReply::set_rlptxs(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  rlptxs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:txpool.TransactionsReply.rlpTxs)
}
inline void TransactionsReply::set_rlptxs(int index, const void* value, size_t size) {
  rlptxs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:txpool.TransactionsReply.rlpTxs)
}
inline std::string* TransactionsReply::_internal_add_rlptxs() {
  return rlptxs_.Add();
}
inline void TransactionsReply::add_rlptxs(const std::string& value) {
  rlptxs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:txpool.TransactionsReply.rlpTxs)
}
inline void TransactionsReply::add_rlptxs(std::string&& value) {
  rlptxs_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:txpool.TransactionsReply.rlpTxs)
}
inline void TransactionsReply::add_rlptxs(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  rlptxs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:txpool.TransactionsReply.rlpTxs)
}
inline void TransactionsReply::add_rlptxs(const void* value, size_t size) {
  rlptxs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:txpool.TransactionsReply.rlpTxs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TransactionsReply::rlptxs() const {
  // @@protoc_insertion_point(field_list:txpool.TransactionsReply.rlpTxs)
  return rlptxs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TransactionsReply::mutable_rlptxs() {
  // @@protoc_insertion_point(field_mutable_list:txpool.TransactionsReply.rlpTxs)
  return &rlptxs_;
}

// -------------------------------------------------------------------

// OnAddRequest

// -------------------------------------------------------------------

// OnAddReply

// repeated bytes rplTxs = 1;
inline int OnAddReply::_internal_rpltxs_size() const {
  return rpltxs_.size();
}
inline int OnAddReply::rpltxs_size() const {
  return _internal_rpltxs_size();
}
inline void OnAddReply::clear_rpltxs() {
  rpltxs_.Clear();
}
inline std::string* OnAddReply::add_rpltxs() {
  // @@protoc_insertion_point(field_add_mutable:txpool.OnAddReply.rplTxs)
  return _internal_add_rpltxs();
}
inline const std::string& OnAddReply::_internal_rpltxs(int index) const {
  return rpltxs_.Get(index);
}
inline const std::string& OnAddReply::rpltxs(int index) const {
  // @@protoc_insertion_point(field_get:txpool.OnAddReply.rplTxs)
  return _internal_rpltxs(index);
}
inline std::string* OnAddReply::mutable_rpltxs(int index) {
  // @@protoc_insertion_point(field_mutable:txpool.OnAddReply.rplTxs)
  return rpltxs_.Mutable(index);
}
inline void OnAddReply::set_rpltxs(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:txpool.OnAddReply.rplTxs)
  rpltxs_.Mutable(index)->assign(value);
}
inline void OnAddReply::set_rpltxs(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:txpool.OnAddReply.rplTxs)
  rpltxs_.Mutable(index)->assign(std::move(value));
}
inline void OnAddReply::set_rpltxs(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  rpltxs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:txpool.OnAddReply.rplTxs)
}
inline void OnAddReply::set_rpltxs(int index, const void* value, size_t size) {
  rpltxs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:txpool.OnAddReply.rplTxs)
}
inline std::string* OnAddReply::_internal_add_rpltxs() {
  return rpltxs_.Add();
}
inline void OnAddReply::add_rpltxs(const std::string& value) {
  rpltxs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:txpool.OnAddReply.rplTxs)
}
inline void OnAddReply::add_rpltxs(std::string&& value) {
  rpltxs_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:txpool.OnAddReply.rplTxs)
}
inline void OnAddReply::add_rpltxs(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  rpltxs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:txpool.OnAddReply.rplTxs)
}
inline void OnAddReply::add_rpltxs(const void* value, size_t size) {
  rpltxs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:txpool.OnAddReply.rplTxs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
OnAddReply::rpltxs() const {
  // @@protoc_insertion_point(field_list:txpool.OnAddReply.rplTxs)
  return rpltxs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
OnAddReply::mutable_rpltxs() {
  // @@protoc_insertion_point(field_mutable_list:txpool.OnAddReply.rplTxs)
  return &rpltxs_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace txpool

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::txpool::ImportResult> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::txpool::ImportResult>() {
  return ::txpool::ImportResult_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_txpool_2ftxpool_2eproto
