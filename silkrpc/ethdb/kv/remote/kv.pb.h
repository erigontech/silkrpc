// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kv.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_kv_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_kv_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_kv_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_kv_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_kv_2eproto;
namespace remote {
class Cursor;
class CursorDefaultTypeInternal;
extern CursorDefaultTypeInternal _Cursor_default_instance_;
class Pair;
class PairDefaultTypeInternal;
extern PairDefaultTypeInternal _Pair_default_instance_;
}  // namespace remote
PROTOBUF_NAMESPACE_OPEN
template<> ::remote::Cursor* Arena::CreateMaybeMessage<::remote::Cursor>(Arena*);
template<> ::remote::Pair* Arena::CreateMaybeMessage<::remote::Pair>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace remote {

enum Op : int {
  FIRST = 0,
  FIRST_DUP = 1,
  SEEK = 2,
  SEEK_BOTH = 3,
  CURRENT = 4,
  LAST = 6,
  LAST_DUP = 7,
  NEXT = 8,
  NEXT_DUP = 9,
  NEXT_NO_DUP = 11,
  PREV = 12,
  PREV_DUP = 13,
  PREV_NO_DUP = 14,
  SEEK_EXACT = 15,
  SEEK_BOTH_EXACT = 16,
  OPEN = 30,
  CLOSE = 31,
  Op_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Op_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Op_IsValid(int value);
constexpr Op Op_MIN = FIRST;
constexpr Op Op_MAX = CLOSE;
constexpr int Op_ARRAYSIZE = Op_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Op_descriptor();
template<typename T>
inline const std::string& Op_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Op>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Op_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Op_descriptor(), enum_t_value);
}
inline bool Op_Parse(
    const std::string& name, Op* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Op>(
    Op_descriptor(), name, value);
}
// ===================================================================

class Cursor PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:remote.Cursor) */ {
 public:
  inline Cursor() : Cursor(nullptr) {};
  virtual ~Cursor();

  Cursor(const Cursor& from);
  Cursor(Cursor&& from) noexcept
    : Cursor() {
    *this = ::std::move(from);
  }

  inline Cursor& operator=(const Cursor& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cursor& operator=(Cursor&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Cursor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Cursor* internal_default_instance() {
    return reinterpret_cast<const Cursor*>(
               &_Cursor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Cursor& a, Cursor& b) {
    a.Swap(&b);
  }
  inline void Swap(Cursor* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Cursor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Cursor* New() const final {
    return CreateMaybeMessage<Cursor>(nullptr);
  }

  Cursor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Cursor>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Cursor& from);
  void MergeFrom(const Cursor& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cursor* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "remote.Cursor";
  }
  protected:
  explicit Cursor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kv_2eproto);
    return ::descriptor_table_kv_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBucketNameFieldNumber = 2,
    kKFieldNumber = 4,
    kVFieldNumber = 5,
    kOpFieldNumber = 1,
    kCursorFieldNumber = 3,
  };
  // string bucketName = 2;
  void clear_bucketname();
  const std::string& bucketname() const;
  void set_bucketname(const std::string& value);
  void set_bucketname(std::string&& value);
  void set_bucketname(const char* value);
  void set_bucketname(const char* value, size_t size);
  std::string* mutable_bucketname();
  std::string* release_bucketname();
  void set_allocated_bucketname(std::string* bucketname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_bucketname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_bucketname(
      std::string* bucketname);
  private:
  const std::string& _internal_bucketname() const;
  void _internal_set_bucketname(const std::string& value);
  std::string* _internal_mutable_bucketname();
  public:

  // bytes k = 4;
  void clear_k();
  const std::string& k() const;
  void set_k(const std::string& value);
  void set_k(std::string&& value);
  void set_k(const char* value);
  void set_k(const void* value, size_t size);
  std::string* mutable_k();
  std::string* release_k();
  void set_allocated_k(std::string* k);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_k();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_k(
      std::string* k);
  private:
  const std::string& _internal_k() const;
  void _internal_set_k(const std::string& value);
  std::string* _internal_mutable_k();
  public:

  // bytes v = 5;
  void clear_v();
  const std::string& v() const;
  void set_v(const std::string& value);
  void set_v(std::string&& value);
  void set_v(const char* value);
  void set_v(const void* value, size_t size);
  std::string* mutable_v();
  std::string* release_v();
  void set_allocated_v(std::string* v);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_v();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_v(
      std::string* v);
  private:
  const std::string& _internal_v() const;
  void _internal_set_v(const std::string& value);
  std::string* _internal_mutable_v();
  public:

  // .remote.Op op = 1;
  void clear_op();
  ::remote::Op op() const;
  void set_op(::remote::Op value);
  private:
  ::remote::Op _internal_op() const;
  void _internal_set_op(::remote::Op value);
  public:

  // uint32 cursor = 3;
  void clear_cursor();
  ::PROTOBUF_NAMESPACE_ID::uint32 cursor() const;
  void set_cursor(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cursor() const;
  void _internal_set_cursor(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:remote.Cursor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bucketname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr k_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr v_;
  int op_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cursor_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kv_2eproto;
};
// -------------------------------------------------------------------

class Pair PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:remote.Pair) */ {
 public:
  inline Pair() : Pair(nullptr) {};
  virtual ~Pair();

  Pair(const Pair& from);
  Pair(Pair&& from) noexcept
    : Pair() {
    *this = ::std::move(from);
  }

  inline Pair& operator=(const Pair& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pair& operator=(Pair&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Pair& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Pair* internal_default_instance() {
    return reinterpret_cast<const Pair*>(
               &_Pair_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Pair& a, Pair& b) {
    a.Swap(&b);
  }
  inline void Swap(Pair* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Pair* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Pair* New() const final {
    return CreateMaybeMessage<Pair>(nullptr);
  }

  Pair* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Pair>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Pair& from);
  void MergeFrom(const Pair& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pair* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "remote.Pair";
  }
  protected:
  explicit Pair(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kv_2eproto);
    return ::descriptor_table_kv_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKFieldNumber = 1,
    kVFieldNumber = 2,
    kCursorIDFieldNumber = 3,
  };
  // bytes k = 1;
  void clear_k();
  const std::string& k() const;
  void set_k(const std::string& value);
  void set_k(std::string&& value);
  void set_k(const char* value);
  void set_k(const void* value, size_t size);
  std::string* mutable_k();
  std::string* release_k();
  void set_allocated_k(std::string* k);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_k();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_k(
      std::string* k);
  private:
  const std::string& _internal_k() const;
  void _internal_set_k(const std::string& value);
  std::string* _internal_mutable_k();
  public:

  // bytes v = 2;
  void clear_v();
  const std::string& v() const;
  void set_v(const std::string& value);
  void set_v(std::string&& value);
  void set_v(const char* value);
  void set_v(const void* value, size_t size);
  std::string* mutable_v();
  std::string* release_v();
  void set_allocated_v(std::string* v);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_v();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_v(
      std::string* v);
  private:
  const std::string& _internal_v() const;
  void _internal_set_v(const std::string& value);
  std::string* _internal_mutable_v();
  public:

  // uint32 cursorID = 3;
  void clear_cursorid();
  ::PROTOBUF_NAMESPACE_ID::uint32 cursorid() const;
  void set_cursorid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cursorid() const;
  void _internal_set_cursorid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:remote.Pair)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr k_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr v_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cursorid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kv_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Cursor

// .remote.Op op = 1;
inline void Cursor::clear_op() {
  op_ = 0;
}
inline ::remote::Op Cursor::_internal_op() const {
  return static_cast< ::remote::Op >(op_);
}
inline ::remote::Op Cursor::op() const {
  // @@protoc_insertion_point(field_get:remote.Cursor.op)
  return _internal_op();
}
inline void Cursor::_internal_set_op(::remote::Op value) {
  
  op_ = value;
}
inline void Cursor::set_op(::remote::Op value) {
  _internal_set_op(value);
  // @@protoc_insertion_point(field_set:remote.Cursor.op)
}

// string bucketName = 2;
inline void Cursor::clear_bucketname() {
  bucketname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Cursor::bucketname() const {
  // @@protoc_insertion_point(field_get:remote.Cursor.bucketName)
  return _internal_bucketname();
}
inline void Cursor::set_bucketname(const std::string& value) {
  _internal_set_bucketname(value);
  // @@protoc_insertion_point(field_set:remote.Cursor.bucketName)
}
inline std::string* Cursor::mutable_bucketname() {
  // @@protoc_insertion_point(field_mutable:remote.Cursor.bucketName)
  return _internal_mutable_bucketname();
}
inline const std::string& Cursor::_internal_bucketname() const {
  return bucketname_.Get();
}
inline void Cursor::_internal_set_bucketname(const std::string& value) {
  
  bucketname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Cursor::set_bucketname(std::string&& value) {
  
  bucketname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:remote.Cursor.bucketName)
}
inline void Cursor::set_bucketname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bucketname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:remote.Cursor.bucketName)
}
inline void Cursor::set_bucketname(const char* value,
    size_t size) {
  
  bucketname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:remote.Cursor.bucketName)
}
inline std::string* Cursor::_internal_mutable_bucketname() {
  
  return bucketname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Cursor::release_bucketname() {
  // @@protoc_insertion_point(field_release:remote.Cursor.bucketName)
  return bucketname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Cursor::set_allocated_bucketname(std::string* bucketname) {
  if (bucketname != nullptr) {
    
  } else {
    
  }
  bucketname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bucketname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:remote.Cursor.bucketName)
}
inline std::string* Cursor::unsafe_arena_release_bucketname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:remote.Cursor.bucketName)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return bucketname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Cursor::unsafe_arena_set_allocated_bucketname(
    std::string* bucketname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (bucketname != nullptr) {
    
  } else {
    
  }
  bucketname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      bucketname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:remote.Cursor.bucketName)
}

// uint32 cursor = 3;
inline void Cursor::clear_cursor() {
  cursor_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Cursor::_internal_cursor() const {
  return cursor_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Cursor::cursor() const {
  // @@protoc_insertion_point(field_get:remote.Cursor.cursor)
  return _internal_cursor();
}
inline void Cursor::_internal_set_cursor(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  cursor_ = value;
}
inline void Cursor::set_cursor(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cursor(value);
  // @@protoc_insertion_point(field_set:remote.Cursor.cursor)
}

// bytes k = 4;
inline void Cursor::clear_k() {
  k_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Cursor::k() const {
  // @@protoc_insertion_point(field_get:remote.Cursor.k)
  return _internal_k();
}
inline void Cursor::set_k(const std::string& value) {
  _internal_set_k(value);
  // @@protoc_insertion_point(field_set:remote.Cursor.k)
}
inline std::string* Cursor::mutable_k() {
  // @@protoc_insertion_point(field_mutable:remote.Cursor.k)
  return _internal_mutable_k();
}
inline const std::string& Cursor::_internal_k() const {
  return k_.Get();
}
inline void Cursor::_internal_set_k(const std::string& value) {
  
  k_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Cursor::set_k(std::string&& value) {
  
  k_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:remote.Cursor.k)
}
inline void Cursor::set_k(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  k_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:remote.Cursor.k)
}
inline void Cursor::set_k(const void* value,
    size_t size) {
  
  k_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:remote.Cursor.k)
}
inline std::string* Cursor::_internal_mutable_k() {
  
  return k_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Cursor::release_k() {
  // @@protoc_insertion_point(field_release:remote.Cursor.k)
  return k_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Cursor::set_allocated_k(std::string* k) {
  if (k != nullptr) {
    
  } else {
    
  }
  k_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), k,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:remote.Cursor.k)
}
inline std::string* Cursor::unsafe_arena_release_k() {
  // @@protoc_insertion_point(field_unsafe_arena_release:remote.Cursor.k)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return k_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Cursor::unsafe_arena_set_allocated_k(
    std::string* k) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (k != nullptr) {
    
  } else {
    
  }
  k_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      k, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:remote.Cursor.k)
}

// bytes v = 5;
inline void Cursor::clear_v() {
  v_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Cursor::v() const {
  // @@protoc_insertion_point(field_get:remote.Cursor.v)
  return _internal_v();
}
inline void Cursor::set_v(const std::string& value) {
  _internal_set_v(value);
  // @@protoc_insertion_point(field_set:remote.Cursor.v)
}
inline std::string* Cursor::mutable_v() {
  // @@protoc_insertion_point(field_mutable:remote.Cursor.v)
  return _internal_mutable_v();
}
inline const std::string& Cursor::_internal_v() const {
  return v_.Get();
}
inline void Cursor::_internal_set_v(const std::string& value) {
  
  v_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Cursor::set_v(std::string&& value) {
  
  v_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:remote.Cursor.v)
}
inline void Cursor::set_v(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  v_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:remote.Cursor.v)
}
inline void Cursor::set_v(const void* value,
    size_t size) {
  
  v_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:remote.Cursor.v)
}
inline std::string* Cursor::_internal_mutable_v() {
  
  return v_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Cursor::release_v() {
  // @@protoc_insertion_point(field_release:remote.Cursor.v)
  return v_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Cursor::set_allocated_v(std::string* v) {
  if (v != nullptr) {
    
  } else {
    
  }
  v_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), v,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:remote.Cursor.v)
}
inline std::string* Cursor::unsafe_arena_release_v() {
  // @@protoc_insertion_point(field_unsafe_arena_release:remote.Cursor.v)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return v_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Cursor::unsafe_arena_set_allocated_v(
    std::string* v) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (v != nullptr) {
    
  } else {
    
  }
  v_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      v, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:remote.Cursor.v)
}

// -------------------------------------------------------------------

// Pair

// bytes k = 1;
inline void Pair::clear_k() {
  k_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Pair::k() const {
  // @@protoc_insertion_point(field_get:remote.Pair.k)
  return _internal_k();
}
inline void Pair::set_k(const std::string& value) {
  _internal_set_k(value);
  // @@protoc_insertion_point(field_set:remote.Pair.k)
}
inline std::string* Pair::mutable_k() {
  // @@protoc_insertion_point(field_mutable:remote.Pair.k)
  return _internal_mutable_k();
}
inline const std::string& Pair::_internal_k() const {
  return k_.Get();
}
inline void Pair::_internal_set_k(const std::string& value) {
  
  k_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Pair::set_k(std::string&& value) {
  
  k_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:remote.Pair.k)
}
inline void Pair::set_k(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  k_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:remote.Pair.k)
}
inline void Pair::set_k(const void* value,
    size_t size) {
  
  k_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:remote.Pair.k)
}
inline std::string* Pair::_internal_mutable_k() {
  
  return k_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Pair::release_k() {
  // @@protoc_insertion_point(field_release:remote.Pair.k)
  return k_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Pair::set_allocated_k(std::string* k) {
  if (k != nullptr) {
    
  } else {
    
  }
  k_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), k,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:remote.Pair.k)
}
inline std::string* Pair::unsafe_arena_release_k() {
  // @@protoc_insertion_point(field_unsafe_arena_release:remote.Pair.k)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return k_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Pair::unsafe_arena_set_allocated_k(
    std::string* k) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (k != nullptr) {
    
  } else {
    
  }
  k_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      k, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:remote.Pair.k)
}

// bytes v = 2;
inline void Pair::clear_v() {
  v_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Pair::v() const {
  // @@protoc_insertion_point(field_get:remote.Pair.v)
  return _internal_v();
}
inline void Pair::set_v(const std::string& value) {
  _internal_set_v(value);
  // @@protoc_insertion_point(field_set:remote.Pair.v)
}
inline std::string* Pair::mutable_v() {
  // @@protoc_insertion_point(field_mutable:remote.Pair.v)
  return _internal_mutable_v();
}
inline const std::string& Pair::_internal_v() const {
  return v_.Get();
}
inline void Pair::_internal_set_v(const std::string& value) {
  
  v_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Pair::set_v(std::string&& value) {
  
  v_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:remote.Pair.v)
}
inline void Pair::set_v(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  v_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:remote.Pair.v)
}
inline void Pair::set_v(const void* value,
    size_t size) {
  
  v_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:remote.Pair.v)
}
inline std::string* Pair::_internal_mutable_v() {
  
  return v_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Pair::release_v() {
  // @@protoc_insertion_point(field_release:remote.Pair.v)
  return v_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Pair::set_allocated_v(std::string* v) {
  if (v != nullptr) {
    
  } else {
    
  }
  v_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), v,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:remote.Pair.v)
}
inline std::string* Pair::unsafe_arena_release_v() {
  // @@protoc_insertion_point(field_unsafe_arena_release:remote.Pair.v)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return v_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Pair::unsafe_arena_set_allocated_v(
    std::string* v) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (v != nullptr) {
    
  } else {
    
  }
  v_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      v, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:remote.Pair.v)
}

// uint32 cursorID = 3;
inline void Pair::clear_cursorid() {
  cursorid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Pair::_internal_cursorid() const {
  return cursorid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Pair::cursorid() const {
  // @@protoc_insertion_point(field_get:remote.Pair.cursorID)
  return _internal_cursorid();
}
inline void Pair::_internal_set_cursorid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  cursorid_ = value;
}
inline void Pair::set_cursorid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cursorid(value);
  // @@protoc_insertion_point(field_set:remote.Pair.cursorID)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace remote

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::remote::Op> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::remote::Op>() {
  return ::remote::Op_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_kv_2eproto
