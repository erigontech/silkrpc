// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: jsonrpc.proto

#include "jsonrpc.pb.h"
#include "jsonrpc.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace rpcdaemon {

static const char* JsonRpcService_method_names[] = {
  "/rpcdaemon.JsonRpcService/JsonRpc",
};

std::unique_ptr< JsonRpcService::Stub> JsonRpcService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< JsonRpcService::Stub> stub(new JsonRpcService::Stub(channel));
  return stub;
}

JsonRpcService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_JsonRpc_(JsonRpcService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status JsonRpcService::Stub::JsonRpc(::grpc::ClientContext* context, const ::rpcdaemon::JsonRpcRequest& request, ::rpcdaemon::JsonRpcResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_JsonRpc_, context, request, response);
}

void JsonRpcService::Stub::experimental_async::JsonRpc(::grpc::ClientContext* context, const ::rpcdaemon::JsonRpcRequest* request, ::rpcdaemon::JsonRpcResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_JsonRpc_, context, request, response, std::move(f));
}

void JsonRpcService::Stub::experimental_async::JsonRpc(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rpcdaemon::JsonRpcResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_JsonRpc_, context, request, response, std::move(f));
}

void JsonRpcService::Stub::experimental_async::JsonRpc(::grpc::ClientContext* context, const ::rpcdaemon::JsonRpcRequest* request, ::rpcdaemon::JsonRpcResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_JsonRpc_, context, request, response, reactor);
}

void JsonRpcService::Stub::experimental_async::JsonRpc(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rpcdaemon::JsonRpcResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_JsonRpc_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::rpcdaemon::JsonRpcResponse>* JsonRpcService::Stub::AsyncJsonRpcRaw(::grpc::ClientContext* context, const ::rpcdaemon::JsonRpcRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::rpcdaemon::JsonRpcResponse>::Create(channel_.get(), cq, rpcmethod_JsonRpc_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::rpcdaemon::JsonRpcResponse>* JsonRpcService::Stub::PrepareAsyncJsonRpcRaw(::grpc::ClientContext* context, const ::rpcdaemon::JsonRpcRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::rpcdaemon::JsonRpcResponse>::Create(channel_.get(), cq, rpcmethod_JsonRpc_, context, request, false);
}

JsonRpcService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      JsonRpcService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< JsonRpcService::Service, ::rpcdaemon::JsonRpcRequest, ::rpcdaemon::JsonRpcResponse>(
          [](JsonRpcService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::rpcdaemon::JsonRpcRequest* req,
             ::rpcdaemon::JsonRpcResponse* resp) {
               return service->JsonRpc(ctx, req, resp);
             }, this)));
}

JsonRpcService::Service::~Service() {
}

::grpc::Status JsonRpcService::Service::JsonRpc(::grpc::ServerContext* context, const ::rpcdaemon::JsonRpcRequest* request, ::rpcdaemon::JsonRpcResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace rpcdaemon

